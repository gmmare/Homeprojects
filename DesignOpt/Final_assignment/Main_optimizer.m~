% Initialization
clear
opt_params;
%{ 
design vector x
1 Front spar location (continuous)
2 Aft spar location (continuous)
3 Web-thickness front spar (continuous)
4 Web-thickness aft spar (continuous)
5 Flange thickness front spar (continuous)
6 Flange thickness aft spar (continuous)
%}

%initial design
xq = [0.1 0.6 0.0012 0.0012 0.0015 0.0015];

%design starting point
obj_old = objective(xq);

%beginning function value for ending criteria
tolF = 1e-10;
diff_fval = 1;
fval = 1;
cycle = 0;

% Loop over optimization cycle:
while(diff_fval>0 && cycle<51)
   	fval_old = fval;
    cycle = cycle + 1;

    xc1_lst(cycle) = xq(1);
    xc2_lst(cycle) = xq(2);
    % Forward finite diffence gradients of objective function and constraints
    hi=1e-8;        %step size when line searching
    
    % calculating finite difference gradient for the objective function +
    % barriers
    sq = FiniteDifference_reduced(xq, hi);

    % Setting of options:
    options = optimset('tolx',1.0e-8,'MaxFunEvals',50);
    
    % Determining bounds. Whichever bound is hit first for a certain alpha
    % is the decider for the limits of the line search
     
    for i=1:2
        if sq(i) <0
            dif_upper(i) = (xq(i) - lb(i))/abs(sq(i));
            dif_lower(i) = (xq(i) - ub(i))/abs(sq(i));
        else
            dif_upper(i) = (ub(i) - xq(i))/abs(sq(i));
            dif_lower(i) = (lb(i) - xq(i))/abs(sq(i));
        end
    end
    
    %Line search (note the lower and upper bound of alfhaq):
    [alphaq,fval,exitflag] = ...
           fminbnd(@(alpha) objective_mask(alpha, xq,sq), max(dif_lower), 0.5 * min(dif_upper), [options]);
    
    alphaq = alphaq*0.5;
    % Computation of result of line search (new design point):
    for i=1:length(xq)
        xq(i) = xq(i) + alphaq*sq(i);
    end
    
    %function eval
    diff_fval = abs(1 - fval/fval_old);
    [cycle, diff_fval]
    xq_new = xq;
end 

%%
disp('Done')
disp('check constraints, higher than 1 is better')
check_flut = constraints(GetInertia(xq_new)_
check_bend = GetInertia(xq_new)

disp('relative value constraints, higher than 1 is better')
relative_flut = check_flut/p_ref
relative_bend = check_bend/(0.8 * I_xx_ref)

disp('design vector')
xq_new

